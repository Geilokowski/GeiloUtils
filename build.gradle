buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}
plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'java'
}

apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

def build_version = "1.6.${System.getenv("BUILD_NUMBER") ?: 0}-${System.getenv("GIT_BRANCH") ?: "CUSTOM_BUILD"}"
version = build_version
group = "play.ai.dragonrealm.geiloutils" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "geiloutils"

java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // Channel:   Version:
    // snapshot   YYYYMMDD   Snapshot are built nightly.
    // stable     #          Stables are built at the discretion of the MCP team.
    // official   MCVersion  Official field/method names from Mojang mapping files
    //
    // You must be aware of the Mojang license when using the 'official' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'official', version: '1.16.5'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                geiloutils {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                geiloutils {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'geiloutils', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                geiloutils {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { url "https://maven.latmod.com/" }
    maven { url "https://dvs1.progwml6.com/files/maven" } //JEI
    maven { url 'https://jitpack.io' }
}

configurations {
    shade
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.16.5-36.2.34'

    implementation 'com.github.DV8FromtheWorld:JDA:4.4.0'
    shade 'com.github.DV8FromtheWorld:JDA:4.4.0'

}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "geiloutils",
            "Specification-Vendor": "TeamDMFMM",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"TeamDMFMM",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}


reobf {
    shadowJar { }
}
// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

shadowJar {
    classifier = ""
    configurations = [project.configurations.shade]
    relocate "org.slf4j","play.ai.dragonrealm.geiloutils.repack.org.slf4j"
    relocate "com.iwebpp.crypto", "play.ai.dragonrealm.geiloutils.repack.com.iwebpp.crypto"
    relocate "com.neovisionaries.ws.client", "play.ai.dragonrealm.geiloutils.repack.com.neovisionaries.ws.client"
    relocate "com.sun.jna", "play.ai.dragonrealm.geiloutils.repack.com.sun.jna"
    relocate "com.vdurmont.emoji", "play.ai.dragonrealm.geiloutils.repack.com.vdurmont.emoji"
    relocate "gnu.trove", "play.ai.dragonrealm.geiloutils.gnu.trove"
    relocate "net.dv8tion.jda", "play.ai.dragonrealm.geiloutils.repack.net.dv8tion.jda"
    relocate "okhttp3", "play.ai.dragonrealm.geiloutils.repack.okhttp3"
    relocate "okio", "play.ai.dragonrealm.geiloutils.repack.okio"
    relocate "org.apache.commons.collections4", "play.ai.dragonrealm.geiloutils.repack.org.apache.commons.collections4"
    relocate "org.apache.commons.lang3", "play.ai.dragonrealm.geiloutils.repack.org.apache.commons.lang3"
    relocate "org.json", "play.ai.dragonrealm.geiloutils.repack.org.json"
    relocate "tomp2p.opuswrapper", "play.ai.dragonrealm.geiloutils.repack.tomp2p.opuswrapper"
    relocate "com.fasterxml", "play.ai.dragonrealm.geiloutils.repack.com.fasterxml"
}
